I"<blockquote>
  <p>webpack 5, image lazy loading, image, font size 압축, font preload, woff/woff2 font 사용을 통해
단순한 정적 멀티페이지의 로딩 시간을 줄여보았다.</p>
</blockquote>

<p>마포청년일자리사업단 : <a href="https://mapo-project.github.io/MaCheongDan">https://mapo-project.github.io/MaCheongDan/</a><br />
Github repository : <a href="https://github.com/Mapo-Project/MaCheongDan">https://github.com/Mapo-Project/MaCheongDan</a></p>

<h2 id="결과">결과</h2>

<h3 id="lighthouse">LightHouse</h3>

<p><img src="./../images/8-9-optimize_mcd/light_house.png" alt="LightHouse" />
다른 부분은 부족하더라도 성능에 있어서는 최적화가 되었다.</p>

<h2 id="최적화-과정">최적화 과정</h2>

<ul>
  <li>webpack을 이용해 js, css, html을 모듈화하여 번들링하였다.<br />(main.js를 모듈화하여 2개의 js파일을 하나로 합쳤다.)<br /><br /></li>
  <li>js, css, html 모두 minimize하고 js는 난독화 해주었다.<br /><br /></li>
  <li>첫페이지를 제외한 이미지들에 image lazy loading를 적용하였다. 최근 브라우저에는 사파리 포함하여 img태그에 loading=’lazy’를 설정하여 쉽게 lazy loading을 구현할 수 있다.</li>
</ul>
<pre><code>
&lt;img
	loading="lazy"
	class="mapo-slogan__img"
	alt="mapo-slogan"
	src="./images/homepage/page_01_001.jpg"
/&gt;
</code></pre>
<ul>
  <li><a href="https://www.iloveimg.com/ko/compress-image">이미지 압축 사이트</a>를 통해 이미지를 압축했다. 70% 가량 압축할 수 있었다.<br /><br /></li>
  <li>기존 Noto sans kr 폰트 형식을 otf에서 woff/woff2로 바꾸었다. font-display:swap으로 사용자에게 빠르게 폰트를 보여줄 수 있도록 했다.</li>
</ul>
<pre><code>
@font-face {
	font-family: 'Noto Sans KR';
	font-style: normal;
	src: url(./../fonts/noto-sans-kr-v27-korean-900.woff2) format('woff2'),
	url(./../fonts/noto-sans-kr-v27-korean-900.woff) format('woff');
	font-weight: 900;
	font-display: swap;
}
</code></pre>
<ul>
  <li>첫 페이지에 나오는 폰트를 빠르게 보여주기 위해 link태그의 rel=”preload” 통해 프리로딩하였다.</li>
</ul>
<pre><code>
	&lt;link
		rel="preload"
		href="./fonts/MaruBuri-Bold.woff2"
		as="font"
		type="font/woff2"
		crossorigin
	/&gt;
</code></pre>

<h2 id="압축-요약">압축 요약</h2>

<p>상세파일은 일부만 예로 들었다.</p>

<p><img src="./../images/8-9-optimize_mcd/compress_summary.png" alt="compression_result" /></p>

<h2 id="성능-분석">성능 분석</h2>

<h3 id="before">BEFORE</h3>

<p><img src="./../images/8-9-optimize_mcd/before.png" alt="BEFORE" /></p>

<h3 id="after">AFTER</h3>

<p><img src="./../images/8-9-optimize_mcd/after.png" alt="AFTER" /></p>

<p><strong>request</strong></p>

<p>173 → 155</p>

<p>10% 감소</p>

<ul>
  <li>image lazyloading에 따른 image loading 감소</li>
  <li>noto sans kr woff2 폰트가 font-weight 별로 나뉘어 있어서 font resource의 request 수는 증가</li>
  <li>maru-buri font를 preload하므로 request 하나 증가</li>
  <li>구글이메일과 연동되어 지속적으로 서버에 요청을 보내므로 점점 늘어남</li>
</ul>

<p><strong>transferred (네트워크 통한 전송)</strong></p>

<p>34.9 MB → 15.0 MB</p>

<p>60% 감소</p>

<ul>
  <li>압축된 자원</li>
</ul>

<p><strong>resources(페이지에서 로드된 용량)</strong></p>

<p>44.7MB → 21.3MB</p>

<p>50% 감소</p>

<ul>
  <li>압축되지 않은 자원</li>
  <li>image lazyloading에 따른 resource 감소</li>
  <li>html, css, js webpack bundling, minimize, uglify</li>
  <li>font resource 감소</li>
  <li>image resource 감소</li>
</ul>

<p><strong>finish</strong></p>

<p>17.77s → 12.05s</p>

<p>30% 감소</p>

<ul>
  <li>지속적으로 자원을 요청하므로 큰 의미는 없다.</li>
</ul>

<p><strong>DOMContentLoaded</strong></p>

<p>666ms → 1.15s</p>

<p>약 2배 증가 왜 그런지 고민했다.</p>

<ul>
  <li>캐시 저장 안하고 새로고침 할 때마다 0.5 ~ 1.5초정도까지 변동이 있었다.</li>
  <li>DOM이 만들어지면 일어나는 이벤트인데 어디서 문제가 있는지 잘 모르겠다.</li>
  <li>찾아보다가 첫 페이지에 필요 없는 font를 preload한 사실을 깨달았다.</li>
  <li>이를 해결하니 결과가 다음과 같다.</li>
</ul>

<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f385e560-f2f2-423d-8350-b44a690dc8e2/Untitled.png" alt="Untitled" /></p>

<ul>
  <li>새로고침 할 때마다 0.3 ~ 1초정도까지 변동이 있었다.</li>
  <li>평균적인 DOMContentLoaded 시간은 줄이긴 했으나 정확한 원리를 알지 못하겠다.</li>
  <li>preload로 resource download 우선순위가 높아지면 기존 js, css들의 다운로드가 늦어져서 생기는 현상이라고 짐작하고 있다.</li>
  <li>변동이 생기는 이유는 DOM 만드는 것을 blocking하는 js, css들의 전송에 있어서 서버 상태가 일정하지 않기 때문이라고 판단하였다.</li>
</ul>

<p><strong>Load</strong></p>

<p>17.77s → 3.52s</p>

<p>약 80% 감소</p>

<ul>
  <li>image lazy loading</li>
  <li>font resource 감소</li>
  <li>image resource 감소</li>
</ul>

<p>다른 객관적 지표를 찾아보기 위해 구글의 lighthouse란 툴을 사용했다.</p>

<h2 id="후기">후기</h2>
:ET